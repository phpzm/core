<?php

namespace Simples\Core\Model;

use Simples\Core\Database\Engine;

/**
 * Class ActiveRecord
 * @package Simples\Core\Model
 */
class ActiveRecord extends Engine
{
    /**
     * @var string
     */
    protected $connection = 'default';

    /**
     * @var string
     */
    protected $collection = '';

    /**
     * @var array
     */
    protected $fields = [];

    /**
     * @var array
     */
    protected $pk = ['id'];

    /**
     * @var bool
     */
    protected $timestamps = false;

    /**
     * @var array
     */
    private $values = [];

    /**
     * ActiveRecord constructor.
     */
    public function __construct()
    {
        parent::__construct($this->connection);
    }

    /**
     * @param $name
     * @param $arguments
     * @return $this
     */
    public function __call($name, $arguments)
    {
        return parent::__call($name, $arguments); // TODO: Change the autogenerated stub
    }

    /**
     * is utilized for reading data from inaccessible members.
     *
     * @param $name string
     * @return mixed
     * @link http://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members
     */
    public function __get($name)
    {
        return isset($this->values[$name]) ? $this->values[$name] : null;
    }

    /**
     * run when writing data to inaccessible members.
     *
     * @param $name string
     * @param $value mixed
     * @return $this
     * @link http://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members
     */
    public function __set($name, $value)
    {
        if (!in_array($name, $this->fields)) {
            return null;
        }
        $this->values[$name] = $value;
        return $this;
    }

    /**
     * @return object
     */
    public function getValues()
    {
        return (object)$this->values;
    }

    /**
     * @return string
     */
    public final function create()
    {
        return $this
            ->table($this->collection)
            ->fields(array_keys($this->values))
            ->insert(array_values($this->values));
    }

    public final function read()
    {

    }

    public final function save()
    {

    }

    public final function destroy()
    {

    }

}
